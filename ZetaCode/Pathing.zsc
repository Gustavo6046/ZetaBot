class PlopResult : Thinker
{
	uint totalNodes;
	Array<String> mapsFound;
	Array<String> nodeMaps;
}

class ZTPathNode : Actor
{
	enum NavigationType
	{
		NT_NORMAL = 0,
		NT_USE,
		NT_SLOW,
		NT_CROUCH,
		NT_JUMP,
		NT_AVOID,
		NT_SHOOT,
		NT_RESPAWN
	};

	static const string ZTNavTypeNames[] = {
        "Normal",
        "Use",
        "Slow",
        "Crouch",
        "Jump",
        "Avoid",
        "Shoot",
        "Respawn"
    };

	enum LogType
	{
		LT_ERROR = 0,
		LT_WARNING,
		LT_INFO,
		LT_VERBOSE
	};

	void DebugLog(LogType kind, string msg)
	{
		if ( CVar.FindCVar("zb_debug").GetInt() > 0 )
		{
			string logHeader = "";
		
			if ( kind == LT_ERROR )
				logHeader = "\cr[ERROR]";
				
			else if ( kind == LT_WARNING )
				logHeader = "\cf[WARNING]";
				
			else if ( kind == LT_INFO )
				logHeader = "\ch[INFO]";
				
			else if ( kind == LT_VERBOSE )
			{
				if ( CVar.FindCVar("zb_debug").GetInt() > 1 )
					logHeader =	"\cd[VERBOSE]";
				
				else
					return;
			}
		
			A_Log("\cq[ZetaBot] "..logHeader.." "..msg);
		}
	}

	NavigationType nodeType;
	double useDirection;
	bool bPlopped;
	uint id;
	bool bGoalNode;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		id = 0;
		
		let iter = ThinkerIterator.create("ZTPathNode");
		
		while ( iter.Next() )
			id++;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		/*
		if ( !bPlopped )
			uploadLevel();
		*/
		
		DebugLog(LT_VERBOSE, "Created new node: "..serialize());
	}
	
	static uint sindex(String full, String sub)
	{
		uint i = 0;
		
		while ( i < full.Length() - sub.Length() )
			if ( full.Mid(i, sub.Length()) == sub )
				return i;
			
		return full.Length();
	}
	
	string serialize()
	{
		return int(pos.x)..","..int(pos.y)..","..int(pos.z)..","..nodeType..","..int(useDirection)..","..(bGoalNode ? "y" : "n");
	}
	
	static string serializeAll(ActorList allNodes)
	{
		String res = level.mapname.."::";
		
		allNodes.iReset();
		ZTPathNode node;
		
		while ( node = ZTPathNode(allNodes.iNext()) )
			res = res..node.serialize()..":";
			
		return res;
	}
	
	static string serializeLevel()
	{
		let iter = ThinkerIterator.create("ZTPathNode", STAT_DEFAULT);
		ActorList list = new("ActorList");
		
		ZTPathNode node = null;
		
		while ( node = ZTPathNode(iter.Next()) )
			list.push(node);
			
		return serializeAll(list);
	}
	
	static string uploadLevel(String cvName = "nodelist")
	{
		String code = CVar.FindCVar(cvName).GetString();
			
		if ( code == "::NONE" )
			code = serializeLevel();
		
		else
		{
			String c;
			uint i = 0;
		
			while ( true )
			{
                c = split(code, ";;", i++);
			
				if ( split(c, "::", 0) == level.mapName)
					break;
					
				if ( c == "" )
				{
                    code = serializeLevel()..";;"..code;
					CVar.FindCVar(cvName).SetString(code);
					return code;
				}
			}
			
			code = code.Left(sindex(code, c))..serializeLevel()..code.Mid(sindex(code, c) + c.Length());
		}
		
		CVar.FindCVar(cvName).SetString(code);
		return code;
	}
	
	static String split(string other, string sep, uint index)
	{
		String res = "";
		uint si = 0;
		uint i = 0;
	
		while ( i < other.Length() )
		{
			if ( other.Mid(i, sep.Length()) == sep )
			{
				if ( si++ == index )
					return res;
				
				i += sep.Length();
			}
				
			else
			{
				if ( si == index )
					res = res..other.CharAt(i);
				
				i++;
			}
		}
		
		if ( si == index )
			return res;
		
		return "";
	}
	
	static int pow(int x, int n)
	{
		int y = 1;
		while (n-- > 0) y *= x;
		return y;
	}
	
	static int SInt(String s)
	{
		int num = 0;
		uint i = 0;
		int sign = 1;
		
		while ( s.Left(1) == "-" )
		{
			sign *= -1;
			s = s.Mid(1);
		}
		
		while ( i < s.Length() )
		{
			int code = s.CharCodeAt(i);
		
			if ( code < 48 || code > 57 ) // Numeric ASCII codes.
				return 0;
			
			num += (code - 48) * pow(10, s.Length() - ++i);
		}
		
		return num * sign;
	}
	
	static PlopResult plopNodes(string code)
	{
		uint i = 0;
		string c, levelMap, ncode;
		let res = new("PlopResult");
		
		if ( code == "::NONE" )
			return res;
			
		while ( true )
		{
			string cmap = split((c = split(code, ";;", i++)), "::", 0);

			if (cmap == "")
				break;

			res.mapsFound.Push(cmap);
			res.nodeMaps.Push(c);
		
			if ( cmap == level.mapName )
				levelMap = split(c, "::", 1);
				
			if ( c == "" )
				return res;
		}
				
		i = 0;
		
		for ( i = 0; (ncode = split(levelMap, ":", i)) != ""; i++ )
		{
			double nx = SInt(split(ncode, ",", 0));
			double ny = SInt(split(ncode, ",", 1));
			double nz = SInt(split(ncode, ",", 2));
			NavigationType nt = SInt(split(ncode, ",", 3));
			double ud = SInt(split(ncode, ",", 4));
			
			let node = ZTPathNode(Spawn("ZTPathNode", (nx, ny, nz)));
			node.nodeType = nt;
			node.bPlopped = true;
			node.bGoalNode = split(ncode, ",", 5) == "y";
			
			node.useDirection = ud;
			
			res.totalNodes++;
		}
		
		return res;
	}
	
	double specialCost(actor Other) // mimicks UT99's NavigationPoint.SpecialCost(Pawn Other)
	{
		if ( nodeType == NT_AVOID )
			return 512;
	
		return 0;
	}
	
	ActorList neighbors()
	{
		ThinkerIterator iter = ThinkerIterator.create("ZTPathNode", Thinker.STAT_DEFAULT);
		ZTPathNode node = null;
		let res = new("ActorList");
		let cand = new("ActorList");
		uint cant = 0;
	
		while ( ( node = ZTPathNode(iter.Next()) ) != null )
			if ( canConnect(node) )
			{
				res.push(node);
				cand.push(node);
			}
		
		for ( uint i = 0; i < res.length(); i++ )
			if ( !postCanConnect(ZTPathNode(cand.Get(i - cant)), cand) )
			{
				res.remove(i - cant);
				cant++;
			}
		
		return res;
	}
	
	ZTPathNode RandomNeighbor()
	{
		ActorList nb = neighbors();
		
		if ( nb.Length() < 1 )
			return self;
		
		return ZTPathNode(nb.get(Random(0, nb.length() - 1)));
	}
	
	ActorList findPathTo(ZTPathNode other, Actor traveller = null)
	{
		let res = ActorList.Empty();
	
		if ( other == null || other == self )
		{
			res.push(self);
			return res;
		}
	
		NumberDict icosts = new("NumberDict");
		Dict cameFrom = new("Dict");
		PriorityQueue openSet = new("PriorityQueue");
		ActorList closedSet = new("ActorList");
		
		bool foundGoal = false;
		
		icosts.set(self, 0);
		openSet.add(self, 0);
		
		while ( openSet.length() > 0 )
		{
			ZTPathNode current = ZTPathNode(openSet.poll());
			 
			if ( current == other )
			{
				foundGoal = true;
				break;
			}
			
			ActorList nb = current.neighbors();
		
			for ( uint i = 0; i < nb.length(); i++ )
				if ( !(openSet.has(nb.get(i)) || closedSet.has(nb.get(i))) )
				{
					ZTPathNode node = ZTPathNode(nb.get(i));
				
					double icost = icosts.get(current, 0) + current.Distance3D(node);
					double cost = node.Distance3D(other) + icost + node.specialCost(traveller);
				
					icosts.set(node, icost);
					openSet.add(node, cost);
					cameFrom.set(node, current);
				}
				
			closedSet.push(current);
		}
		
		if ( !foundGoal )
			return null;
			
		ZTPathNode cur = other;
		
		while ( cur != self )
		{
			res.insert(0, cur);
			cur = ZTPathNode(cameFrom.get(Object(cur)));
		}
		
		res.insert(0, self);
		
		DebugLog(LT_INFO, "Found a "..res.Length().."-node path between "..self.id.." and "..other.id);
		
		return res;
	}
	
	static ZTPathNode plopNode(Vector3 position, NavigationType nt, float angle = 0)
	{
		let node = ZTPathNode(Spawn("ZTPathNode", position));
		node.nodeType = nt;
		node.angle = angle;
		
		return node;
	}
	
	bool postCanConnect(ZTPathNode next, ActorList preNeighbors)
	{
		preNeighbors.iReset();
		ZTPathNode pn = null;
		let off1 = Vec2To(next) / Distance2D(next);
		
		while ( pn = ZTPathNode(preNeighbors.iNext()) )
		{
			let off2 = Vec2To(pn) / Distance2D(pn);
			
			if ( pn.Distance2D(next) < Distance2D(next) - 32 && (off1.x * off2.x + off1.y * off2.y) > 0.625) // all hail the Unit Vector Dot Product!
				return false; // there is already a shorter path in the same
				              // direction
		}
	
		return next.nodeType != NT_AVOID || preNeighbors.Length() < 3;
	}
	
	bool canConnect(ZTPathNode next)
	{
        if ( next == null )
            return false;
	
		if ( ( nodeType == NT_USE || next.nodeType == NT_USE ) && Distance2D(next) < 128 )
			return true; // for doors that block LOS but are traverseable, etc.
	
		double maxZDiff = 24;
		double minZDiff = -Distance2D(next) * 1.3;
		double minDist = 64;
	
		if ( next.nodeType == NT_JUMP )
			maxZDiff = 60;
			
		if ( next.nodeType == NT_SLOW || nodeType == NT_SLOW || next.nodeType == NT_CROUCH || nodeType == NT_CROUCH )
			minDist = 32;
			
		else if ( next.nodeType == NT_USE || nodeType == NT_USE )
			minDist = 4;
			
		minDist -= abs(next.pos.z - pos.z) * 1.5;
		
		if ( minDist < 0 )
			minDist = 0;
			
		if ( Distance3D(next) < minDist )
			return false;
			
		double diffZ = next.pos.z - pos.z;
			
		if ( minZDiff > diffZ || diffZ > maxZDiff )
			return false;
		
		return diffZ <= Distance2D(next) || CheckSight(next);
	}
	
	Default
	{
        Scale 0.35;
        Height 32;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			Goto DLoop;
			
		DLoop:
			TNT1 A 1;
			TNT1 A 0
			{
				if ( CVar.FindCVar("zb_debug").GetInt() > 0 )
					SetStateLabel("DVisible");
			}
			Loop;
			
		DVisible:
			NODE A 1 Bright;
			CAND A 0
			{
				if ( CVar.FindCVar("zb_debug").GetInt() < 1 )
					SetStateLabel("DLoop");
					
                else
                    angle += 18;
			}
			Loop;
	}
}

class ZTGoalNode : Actor // BROKEN!
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.bGoalNode = true;
		node.nodeType = ZTPathNode.NT_USE;
		node.useDirection = angle;
		node.angle = angle;
		
		Destroy();
	}
}


class ZTUseNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_USE;
		node.useDirection = angle;
		node.angle = angle;
		
		Destroy();
	}
}

class ZTJumpNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_JUMP;
		node.angle = angle;
		
		Destroy();
	}
}

class ZTSlowNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_SLOW;
		node.angle = angle;
		
		Destroy();
	}
}

class ZTCrouchNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_CROUCH;
		node.angle = angle;
		
		Destroy();
	}
}

class ZTShootNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_SHOOT;
		node.angle = angle;
		
		Destroy();
	}
}


class ZTAvoidNode : Actor
{
	override void PostBeginPlay()
	{
		let node = ZTPathNode(Spawn("ZTPathNode", pos));
		node.nodeType = ZTPathNode.NT_AVOID;
		node.angle = angle;
		
		Destroy();
	}
}

class ZTUploadNodes : Actor
{
	override void BeginPlay()
	{
		String code = ZTPathNode.uploadLevel("nodelist");
		// A_PrintBold("'"..code.."'");
		
		Destroy();
	}
}

class ZTPromptNodes : Actor
{
	override void BeginPlay()
	{
		ZTPathNode n;
		let iter = ThinkerIterator.Create("ZTPathNode");
		
		while ( n = ZTPathNode(iter.Next()) )
			n.Destroy();
		
		cvar cv = CVar.FindCVar("nodelist");
		
		if ( cv == null )
		{
            Destroy();
            return;
        }
		
		PlopResult r = ZTPathNode.plopNodes(cv.GetString());
		string lst = r.totalNodes.." nodes plopped! "..r.mapsFound.Size().." maps found in nodelist:";
		
		for ( uint i = 0; i < r.mapsFound.Size(); i++ )
			lst = lst.."  >"..r.mapsFound[i];
	
		A_Log(lst);
		Destroy();
	}
}

class ZTDeleteNodes : Actor
{
	override void BeginPlay()
	{
		ZTPathNode n;
		let iter = ThinkerIterator.Create("ZTPathNode");
		String logged = "Deleted %u nodes.";
		uint count = 0;
		
		while ( n = ZTPathNode(iter.Next()) ) {
			n.Destroy();
			count++;
		}

		A_Log(String.Format(logged, count));
		Destroy();
	}
}
